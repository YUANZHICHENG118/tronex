/**
 * 倒计时插件
 * @author Tungse
 * @param dayTag           显示天数的html
 * @param hourTag          显示小时的html
 * @param minTag           显示分钟的html
 * @param secTag           显示秒数的html
 * @param dayClass         绑定天数对应tag的ClassName
 * @param hourClass        绑定小时对应tag的ClassName
 * @param minClass         绑定分钟对应tag的ClassName
 * @param secClass         绑定秒数对应tag的ClassName
 * @param isDefault        是否使用默认tagTemp
 * @param showTemp         显示模板0：(天时分秒) 1：(时分秒)
 * @param backfun          定时完成回调
 */
(function ($) {
    $.fn.countdownsync = function (tagTemp, backfun, d) {
        var data = d
        var _DOM = null;
        var _defaultTag = _TempTag = {
            dayTag: "<li class='countdownday'></li><li class='split'>天</li>",
            hourTag: "<li class='countdownhour'></li><li class='split'>:</li>",
            minTag: "<li class='countdownmin'></li><li class='split'>:</li>",
            secTag: "<li class='countdownsec'></li><li class='split'>:</li>",
            dayClass: ".countdownday",
            hourClass: ".countdownhour",
            minClass: ".countdownmin",
            secClass: ".countdownsec",
            isDefault: false,
            showTemp: 0
        };
        var _temp = $.extend(_TempTag, tagTemp);
        var TIMER;
        createdom = function (dom) {
            _DOM = dom;
            //data = Math.round($(dom).attr("data"));
            var htmlstr = (_temp.showTemp == 0 ? _temp.dayTag : "") + _temp.hourTag + _temp.minTag + _temp.secTag;
            if (_temp.isDefault) {
                htmlstr = (_temp.showTemp == 0 ? _defaultTag.dayTag : "") + _defaultTag.hourTag + _defaultTag.minTag + _defaultTag.secTag;
                htmlstr = "<ul class='countdown'>" + htmlstr + "</ul>";
                $("head").append("<style type='text/css'>.countdown {list-style:none;}.countdown li{float:left;background:#000;color:#fff;border-radius:50%;padding:10px;font-size:14px; font-weight:bold;margin:10px;}.countdown li.split{background:none;margin:10px 0;padding:10px 0;color:#000000;}</style>");
            }
            $(_DOM).html(htmlstr);
            reflash();
        };
        reflash = function () {
            var range = data,
                secday = 86400, sechour = 3600,
                days = parseInt(range / secday),
                hours = _temp.showTemp == 0 ? parseInt((range % secday) / sechour) : parseInt(range / sechour),
                min = parseInt(((range % secday) % sechour) / 60),
                sec = ((range % secday) % sechour) % 60;
            data--;
            if (range < 0) {
                window.clearInterval(TIMER); //清楚定时器
            } else {
                $(_DOM).find(_temp.dayClass).html(nol(days));
                $(_DOM).find(_temp.hourClass).html(nol(hours));
                $(_DOM).find(_temp.minClass).html(nol(min));
                $(_DOM).find(_temp.secClass).html(nol(sec));
            }
            if ((range - 1) == 0) {
                undefined == backfun ? function () {
                } : backfun();
            }
        };
        TIMER = setInterval(reflash, 1000);
        nol = function (h) {
            return h > 9 ? h : '0' + h;
        };
        return this.each(function () {
            var $box = $(this);
            createdom($box);
        });
    };

})(jQuery);


var userAddress = '';
var contractBalanceRate = 0;
var userPercentRate = 0;
var userAvailable = 0;
var userTotalDeposits = 0;
var userTotalWithdrawn = 0;
var userAmountOfDeposits = 0;
var userLastDepositTime = 0;

function getFormattedDate(date) {
    let hour = ('0' + date.getUTCHours()).slice(-2);
    let minute = ('0' + date.getUTCMinutes()).slice(-2);
    let day = ('0' + date.getUTCDate()).slice(-2);
    let month = ('0' + (date.getUTCMonth() + 1)).slice(-2);
    let year = date.getUTCFullYear();
    return hour + ':' + minute + ' ' + day + '.' + month + '.' + year
}

function getFormattedNumber(num) {
    var num = num + '';
    var value = Number(num);
    var res = num.split('.');
    if (res[0].length <= 2) {
        return value.toFixed(6)
    } else if (res[0].length == 3) {
        return value.toFixed(5)
    } else if (res[0].length == 4) {
        return value.toFixed(4)
    } else if (res[0].length == 5) {
        return value.toFixed(3)
    } else if (res[0].length == 6) {
        return value.toFixed(2)
    } else if (res[0].length == 7) {
        return value.toFixed(1)
    } else if (res[0].length >= 8) {
        return value.toFixed(0)
    }
}

var abi = [{"outputs":[{"type":"uint256"}],"constant":true,"name":"PERCENTS_DIVIDER","stateMutability":"View","type":"Function"},{"payable":true,"inputs":[{"name":"referrer","type":"address"}],"name":"invest","stateMutability":"Payable","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"inputs":[{"name":"userAddress","type":"address"}],"name":"getUserDividends","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"inputs":[{"type":"address"}],"name":"userWithdraw","stateMutability":"View","type":"Function"},{"name":"getReferBonus","stateMutability":"Nonpayable","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"inputs":[{"name":"userAddress","type":"address"}],"name":"getUserAvailable","stateMutability":"View","type":"Function"},{"outputs":[{"type":"address"}],"constant":true,"name":"referralAddress","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"inputs":[{"name":"userAddress","type":"address"}],"name":"getUserPercentRate","stateMutability":"View","type":"Function"},{"outputs":[{"name":"_performance","type":"uint256[20]"}],"constant":true,"inputs":[{"name":"_userAddr","type":"address"}],"name":"getPerformance","stateMutability":"View","type":"Function"},{"outputs":[{"type":"bool"}],"constant":true,"inputs":[{"type":"address"}],"name":"superNode","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"FOMO_LIMIT","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"TIME_STEP","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"lastUserId","stateMutability":"View","type":"Function"},{"outputs":[{"type":"address"}],"constant":true,"inputs":[{"name":"userAddress","type":"address"}],"name":"getUserReferrer","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"SUPER_NODE_LIMIT","stateMutability":"View","type":"Function"},{"name":"withdraw","stateMutability":"Nonpayable","type":"Function"},{"outputs":[{"type":"address"}],"constant":true,"name":"projectAddress","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"inputs":[{"type":"address"},{"type":"uint256"}],"name":"userDayWithDraw","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"PROJECT_FEE","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"totalWithdrawn","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"FOMO_START_TIME","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"totalInvested","stateMutability":"View","type":"Function"},{"outputs":[{"name":"addr","type":"address[10]"}],"constant":true,"name":"getNodeList","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"inputs":[{"type":"uint256"}],"name":"REFERRAL_PERCENTS","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"BASE_PERCENT","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"CONTRACT_BALANCE_STEP","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"getContractBalance","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"totalDeposits","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"inputs":[{"name":"userAddress","type":"address"}],"name":"getUserTotalDeposits","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"REMOVE_FOMO_LIMIT","stateMutability":"View","type":"Function"},{"outputs":[{"type":"address"}],"constant":true,"inputs":[{"type":"uint256"}],"name":"superNodeId","stateMutability":"View","type":"Function"},{"outputs":[{"type":"address"}],"constant":true,"name":"owner","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"projectStartTime","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"STARTING_CAPITAL","stateMutability":"View","type":"Function"},{"outputs":[{"type":"address"}],"constant":true,"inputs":[{"type":"uint256"}],"name":"registrationRecord","stateMutability":"View","type":"Function"},{"outputs":[{"type":"bool"}],"constant":true,"inputs":[{"name":"userAddress","type":"address"}],"name":"isActive","stateMutability":"View","type":"Function"},{"outputs":[{"name":"checkpoint","type":"uint256"},{"name":"referrer","type":"address"},{"name":"bonus","type":"uint256"},{"name":"effectiveReferences","type":"uint256"},{"name":"nodeAddr","type":"address"},{"name":"exceeded","type":"uint256"}],"constant":true,"inputs":[{"type":"address"}],"name":"users","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"inputs":[{"name":"userAddress","type":"address"}],"name":"getUserAmountOfDeposits","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"totalUsers","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"},{"type":"uint256"},{"type":"uint256"}],"constant":true,"inputs":[{"name":"userAddress","type":"address"},{"name":"index","type":"uint256"}],"name":"getUserDepositInfo","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"EFFECTIVE_REFER_THRESHOLD","stateMutability":"View","type":"Function"},{"outputs":[{"name":"addr","type":"address[10]"}],"constant":true,"name":"getLastTenParter","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"inputs":[{"name":"userAddress","type":"address"}],"name":"getUserCheckpoint","stateMutability":"View","type":"Function"},{"inputs":[{"name":"addr","type":"address"}],"name":"testGuiji","stateMutability":"Nonpayable","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"INVEST_MIN_AMOUNT","stateMutability":"View","type":"Function"},{"name":"executiveFomoDividend","stateMutability":"Nonpayable","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"FOMO_STATUS","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"inputs":[{"name":"userAddress","type":"address"}],"name":"getUserReferralBonus","stateMutability":"View","type":"Function"},{"inputs":[{"name":"addr","type":"address"}],"name":"addSuperNode","stateMutability":"Nonpayable","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"inputs":[{"name":"userAddress","type":"address"}],"name":"getUserTotalWithdrawn","stateMutability":"View","type":"Function"},{"outputs":[{"type":"address"}],"constant":true,"name":"projectAddress2nd","stateMutability":"View","type":"Function"},{"outputs":[{"type":"uint256"}],"constant":true,"name":"getContractBalanceRate","stateMutability":"View","type":"Function"},{"outputs":[{"type":"address"}],"constant":true,"inputs":[{"type":"uint256"}],"name":"investmentRecord","stateMutability":"View","type":"Function"},{"stateMutability":"Nonpayable","type":"Constructor"},{"inputs":[{"name":"user","type":"address"}],"name":"Newbie","type":"Event"},{"inputs":[{"indexed":true,"name":"user","type":"address"},{"name":"amount","type":"uint256"}],"name":"NewDeposit","type":"Event"},{"inputs":[{"indexed":true,"name":"user","type":"address"},{"name":"amount","type":"uint256"}],"name":"Withdrawn","type":"Event"},{"inputs":[{"indexed":true,"name":"referrer","type":"address"},{"indexed":true,"name":"referral","type":"address"},{"indexed":true,"name":"level","type":"uint256"},{"name":"amount","type":"uint256"}],"name":"RefBonus","type":"Event"},{"inputs":[{"indexed":true,"name":"user","type":"address"},{"name":"totalAmount","type":"uint256"}],"name":"FeePayed","type":"Event"}]
$(function () {

    $('.addSuperNode').show()
    $('.addSuperNodeSuccess').hide()

    setTimeout(() => {
        tronWeb.trx.getBalance(contractAddress).then(result => {
            let balance = tronWeb.toDecimal(result) / 1000000;
            let b = parseFloat(getFormattedNumber(balance));
            $('.contractBalance').html(b);
        })

        loadTrasaction();
    }, 500)

    let search = window.location.search;

    function GetQueryValue(queryName) {
        var reg = new RegExp("(^|&)" + queryName + "=([^&]*)(&|$)", "i");
        var r = search.substr(1).match(reg);
        if (r != null) {
            return decodeURI(r[2]);
        } else {
            return null;
        }
    }

    const ref = GetQueryValue("ref");
    console.log("ref===", ref)

    localStorage.setItem("ref", ref || refererDefault);

    function setUserAddress(address) {
        $('.trxWallet').val(address);
        $('.trxWalletTa125').html('<a href="https://www.megatron-plus.online/?ref=' + address + '"><img src="https://megatron-plus.online/img/125.gif" width="125" height="125" alt="megatron-plus.online | Get +200% up to your deposit right now. Safe and legit!"></a>');
        $('.trxWalletTa468').html('<a href="https://www.megatron-plus.online/?ref=' + address + '"><img src="https://megatron-plus.online/img/468.gif" width="468" height="60" alt="megatron-plus.online | Get +200% up to your deposit right now. Safe and legit!"></a>');
        $('.trxWalletTa728').html('<a href="https://www.megatron-plus.online/?ref=' + address + '"><img src="https://megatron-plus.online/img/728.gif" width="728" height="90" alt="megatron-plus.online | Get +200% up to your deposit right now. Safe and legit!"></a>');
        $('.reflink').html('https://www.megatron-plus.online/?ref=' + address);
        $('#reflink').val('https://www.megatron-plus.online/?ref=' + address)
    }

    var obj = setInterval(async () => {
        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {
            clearInterval(obj);
            userAddress = window.tronWeb.defaultAddress.base58;
            $('.authFalse').hide();
            $('.authTrue').attr('style', 'display:block !important');
            setUserAddress(userAddress);
            updateFull();
            setTimeout(function () {
                var accountInterval = setInterval(async () => {
                    if (window.tronWeb.defaultAddress.base58 !== userAddress) {
                        userAddress = window.tronWeb.defaultAddress.base58;
                        setUserAddress(userAddress);
                        updateFull()
                    }
                }, 100)
            }, 5000)
        }
    }, 10);


    async function addSuperNode() {

        try {
            let instance = await tronWeb.contract(abi, contractAddress);
            let res = await instance.addSuperNode().send({callValue: 0});

            setTimeout(function () {
                updateFull()
            }, 5000)
        } catch (error) {
        }
    }

    async function removeSuperNode() {

        try {
            let instance = await tronWeb.contract(abi, contractAddress);
            let res = await instance.removeSuperNode(userAddress).send({callValue: 0});

            setTimeout(function () {
                updateFull()
            }, 5000)
        } catch (error) {
        }
    }

    async function invest(n) {
        var amount = parseFloat($('.trxAmount' + n).val().replace(',', '.'));
        if (!amount) {
            $('.trxAmountError' + n + '1').show()
        } else if (amount < 100) {
            $('.trxAmountError' + n + '2').show()
        } else {
            amount = Math.floor(amount * 1000000);
            if (!tronWeb.isAddress(userReferer)) {
                userReferer = refererDefault
            }
            let _userReferer = localStorage.getItem("ref") || refererDefault

            console.log("_userReferer===", _userReferer)

            try {
                let instance = await tronWeb.contract(abi, contractAddress);
                debugger
                let res = await instance.invest(_userReferer).send({callValue: amount});
                if (!$('div[data-remodal-id="wallet"]').is(':visible')) {
                    $('#goToWallet').trigger('click')
                }
                setTimeout(function () {
                    updateFull()
                }, 5000)
            } catch (error) {
            }
        }
    }

    $(".investButton1").click(function (e) {
        e.preventDefault();
        invest(1);
        return false
    });
    $(".investButton3").click(function (e) {
        e.preventDefault();
        invest(3);
        return false
    });

    $(".addSuperNode").click(async function (e) {
        e.preventDefault();
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.SUPER_NODE_LIMIT().call();
        let limit = tronWeb.toDecimal(res);
        if (userTotalDeposits >= limit) {
            addSuperNode();
        } else {
            var inst_remodal = $('[data-remodal-id="invest"]').remodal();
            inst_remodal.open()
            //var inst_remodal =   $('[data-remodal-id="invest"]').remodal();
            // $('.remodal').show();
        }


        return false
    });

    $(".removeSuperNode").click(function (e) {
        e.preventDefault();
        removeSuperNode();
        return false
    });

    $(".investButton2").click(function (e) {
        e.preventDefault();
        invest(2);
        return false
    });
    $('.trxAmount1').on('input', function () {
        $('.trxAmountError11').hide();
        $('.trxAmountError12').hide()
    });
    $('.trxAmount2').on('input', function () {
        $('.trxAmountError21').hide();
        $('.trxAmountError22').hide()
    });


    async function withdraw() {
        try {
            let instance = await tronWeb.contract(abi, contractAddress);
            let res = await instance.withdraw().send({callValue: 0});
            if (!$('div[data-remodal-id="wallet"]').is(':visible')) {
                $('#goToWallet').trigger('click')
            }
            setTimeout(function () {
                updateFull()
            }, 5000)
        } catch (error) {
        }
    }

    // 领取动态奖励
    async function getReferBonus() {
        try {
            let instance = await tronWeb.contract(abi, contractAddress);
            let res = await instance.getReferBonus().send({callValue: 0});

            setTimeout(function () {
                updateFull()
            }, 5000)
        } catch (error) {
        }
    }

    $(".withdrawRefButton").click(function (e) {
        e.preventDefault();
        getReferBonus();
        return false
    });


    $(".withdrawButton").click(function (e) {
        e.preventDefault();
        withdraw();
        return false
    });

    async function getContractBalanceRate() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getContractBalanceRate().call();
        contractBalanceRate = tronWeb.toDecimal(res);
        contractBalanceRate = (contractBalanceRate - 10) / 10;
        contractBalanceRate = contractBalanceRate.toFixed(1);
        $('.contractBalanceRate').html('+' + contractBalanceRate + '%')
    }

    async function getUserPercentRate() {
        await getContractBalanceRate();
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserPercentRate(userAddress).call();
        userPercentRate = tronWeb.toDecimal(res);
        userPercentRate = userPercentRate / 10;
        userPercentRate = userPercentRate.toFixed(1);
        $('.userPercentRate .number').html('+' + userPercentRate + '%');


        var basicPercentRate = 3;
        basicPercentRate = basicPercentRate.toFixed(1);
        holdPercentRate = userPercentRate - contractBalanceRate;
        holdPercentRate = holdPercentRate.toFixed(1);
        $('.holdPercentRate').html('+' + holdPercentRate + '%');
        $('.basicPercentRate').html('+' + basicPercentRate + '%')
    }

    async function getUserAvailable() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserAvailable(userAddress).call();
        userAvailable = tronWeb.toDecimal(res);
        userAvailableTrx = userAvailable / 1000000;
        userAvailableTrx = parseFloat(getFormattedNumber(userAvailableTrx));
        // $('.userAvailable').html(userAvailableTrx)
    }

    // 获取静态收益
    async function getUserDividends() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserDividends(userAddress).call();
        userAvailable = tronWeb.toDecimal(res);
        userAvailableTrx = userAvailable / 1000000;
        userAvailableTrx = parseFloat(getFormattedNumber(userAvailableTrx));
        $('.userAvailable').html(userAvailableTrx)
    }

    async function getUserTotalDeposits() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserTotalDeposits(userAddress).call();
        userTotalDeposits = tronWeb.toDecimal(res);
        userTotalDepositsTrx = userTotalDeposits / 1000000;
        userTotalDepositsTrx = parseFloat(getFormattedNumber(userTotalDepositsTrx));
        $('.userTotalDeposits').html(userTotalDepositsTrx)
    }

    async function getUserTotalWithdrawn() {
        await getUserAvailable();
        await getUserDividends();
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserTotalWithdrawn(userAddress).call();
        userTotalWithdrawn = tronWeb.toDecimal(res);
    }

    async function getUserAmountOfDeposits() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserAmountOfDeposits(userAddress).call();
        userAmountOfDeposits = tronWeb.toDecimal(res);
        $('.userAmountOfDeposits').html(userAmountOfDeposits)
    }

    async function getUserLastDepositTime() {
        await getUserAmountOfDeposits();
        if (userAmountOfDeposits > 0) {
            let instance = await tronWeb.contract(abi, contractAddress);
            let res = await instance.getUserDepositInfo(userAddress, userAmountOfDeposits - 1).call();
            userLastDepositTime = tronWeb.toDecimal(res[2]);
            userLastDepositTimeFormatted = getFormattedDate(new Date(userLastDepositTime * 1000));
            $('.userLastDepositTime').html(userLastDepositTimeFormatted);
            $('.withdrawButton').prop('disabled', false);
            $('.withdrawButton').css('cursor', 'pointer');
            $('.withdrawButton').attr('title', '')
        } else {
            $('.userLastDepositTime').html('no deposits');
            $('.withdrawButton').prop('disabled', true);
            $('.withdrawButton').css('cursor', 'not-allowed');
            $('.withdrawButton').attr('title', 'Please make deposit first!')
        }
    }

    async function getUserReferrer() {
        await getUserAmountOfDeposits();
        if (userAmountOfDeposits > 0) {
            let instance = await tronWeb.contract(abi, contractAddress);
            let res = await instance.getUserReferrer(userAddress).call();
            userRefererOld = tronWeb.address.fromHex(res);
            if (userRefererOld != refererDefault) {
                userReferer = userRefererOld;
                $('.userReferer').html(userReferer);
                $('.userRefererDiv').show()
            }
        }
    }

    // 业绩
    async function getUserPerformance() {
        let instance = await tronWeb.contract(abi, contractAddress);

        let getPerformance = await instance.getPerformance(userAddress).call();


        let r0 = tronWeb.toDecimal(getPerformance["_performance"][0]) / 1000000;
        r0 = parseFloat(r0);
        $('.r0').html(r0);

        let r1 = tronWeb.toDecimal(getPerformance["_performance"][1]) / 1000000;
        r1 = parseFloat(r1);
        $('.r1').html(r1);

        let r2 = tronWeb.toDecimal(getPerformance["_performance"][2]) / 1000000;
        r2 = parseFloat(r2);
        $('.r2').html(r2);

        let r3 = 0;
        getPerformance["_performance"].map((item, index) => {

            if (index > 2) {
                let r = tronWeb.toDecimal(getPerformance["_performance"][index]) / 1000000;
                r = parseFloat(r);
                r3 = r3 + r;
            }

        })
        $('.r3').html(r3);
    }

    async function getUserSuperNode() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.superNode(userAddress).call();
        if (res) {
            $('.addSuperNode').hide()
            $('.addSuperNodeSuccess').show()
        } else {
            $('.addSuperNode').show()
            $('.addSuperNodeSuccess').hide()
        }

    }

    async function getSuperNodeLength() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.superNodeLength().call();
        $('.nodeLength').html(parseInt(res))

    }

    async function getSuperNodeList() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getNodeList().call();

        $(".a5").html("");
        $(".b5").html("");
        $(".c5").html("")
        $(".d5").html("")
        $(".nodelista").html("");
        $(".nodelistb").html("");
        res["addr"].map((item, index) => {
            let address = tronWeb.address.fromHex(item);

            let isAddress = tronWeb.isAddress(address)

            if (address != "T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb") {
                if (index <= 4) {
                    if (isAddress) {
                        $(".nodelista").append("<p><span class=\"place\">" + (index + 1) + "</span>" + address.substring(0, 10) + "**********" + address.substring(25, address.length) + "**********</p>")

                    } else {

                    }

                } else {
                    if (isAddress) {
                        $(".nodelistb").append("<p><span class=\"place\">" + (index + 1) + "</span>" + address.substring(0, 10) + "**********" + address.substring(25, address.length) + "**********</p>")
                    } else {
                    }
                }
            }


        })

    }


    async function getUserRefStats() {

        let instance = await tronWeb.contract(abi, contractAddress);

        // let res1 = await instance.getLevalReward(userAddress, 0).call();
        // leval1 = tronWeb.toDecimal(res1);
        // userLeval1 = parseFloat(getFormattedNumber(leval1));
        // $('.userRefsLevel1').html(userLeval1)

        // let res2 = await instance.getLevalReward(userAddress, 1).call();
        // leval2 = tronWeb.toDecimal(res2);
        // userLeval2 = parseFloat(getFormattedNumber(leval2));
        // $('.userRefsLevel2').html(userLeval2)

        // let res3 = await instance.getLevalReward(userAddress, 2).call();
        // leval3 = tronWeb.toDecimal(res3);
        // userLeval3 = parseFloat(getFormattedNumber(leval3));

        // let num = 0;
        // for (let i = 2; i <= 10; i++) {
        //     let _res3 = await instance.getLevalReward(userAddress, i).call();
        //     let _leval3 = tronWeb.toDecimal(_res3);
        //     let _userLeval3 = parseFloat(getFormattedNumber(_leval3));
        //     num = num + _userLeval3;
        // }
        //
        //
        // $('.userRefsLevel3').html(num)


        // let res111 = await instance.userReferralBonus(userAddress).call();
        //
        // let _res111 = tronWeb.toDecimal(res111) ;

        let res11 = await instance.getUserReferralBonus(userAddress).call();


        leval11 = tronWeb.toDecimal(res11) / 1000000;

        userLeval11 = parseFloat(getFormattedNumber(leval11));
        $('.userRefsEarned').html(userLeval11)


        let d0 = 0
        let d4 = 0


        let totalHistory = await instance.userWithdraw(userAddress).call();
        total = tronWeb.toDecimal(totalHistory);

        // 总领取
        //userTotalWithdrawn=0;
        userTotalWithdrawnTrx = (total) / 1000000;
        userTotalWithdrawnTrx = parseFloat(getFormattedNumber(userTotalWithdrawnTrx));
        $('.userTotalWithdrawn').html(userTotalWithdrawnTrx);


        // 赚取总额
        userTotalEarnedTrx = (userAvailable + total) / 1000000;
        userTotalEarnedTrx = parseFloat(getFormattedNumber(userTotalEarnedTrx));
        $('.userEarned').html(userTotalEarnedTrx);


        let rate = 0;
        if (userTotalDeposits > 0) {
            rate = parseFloat((userTotalEarnedTrx) / (userTotalDeposits / 1000000)) * 100

        }
        if (parseInt(rate) >= 150) {
            $('.totalWin .progress .inner').css("width", parseInt(rate) + "%").removeClass("y").addClass("r").html(parseFloat(rate).toFixed(2) + "%");


        } else if (parseInt(rate) >= 100) {

            $('.totalWin .progress .inner').css("width", parseInt(rate) + "%").removeClass("normal").addClass("y").html(parseFloat(rate).toFixed(2) + "%");

        } else {
            $('.totalWin .progress .inner').css("width", parseInt(rate) + "%").html(parseFloat(rate).toFixed(2) + "%");

        }


        //total = tronWeb.toDecimal(totalHistory);


        //
        // $.ajax({
        //     url: "/ajax",
        //     type: "POST",
        //     data: {type: "2", addr: userAddress},
        //     dataType: "json",
        //     success: function (data) {
        //         $('.userRefsEarned').html(parseFloat(getFormattedNumber(data[0] / 1000000)));
        //         $('.userRefsLevel1').html(data[1]);
        //         $('.userRefsLevel2').html(data[2]);
        //         $('.userRefsLevel3').html(data[3]);
        //         userTotalWithdrawnTrx = (userTotalWithdrawn + data[4]) / 1000000;
        //         userTotalWithdrawnTrx = parseFloat(getFormattedNumber(userTotalWithdrawnTrx));
        //         $('.userTotalWithdrawn').html(userTotalWithdrawnTrx);
        //         userTotalEarnedTrx = (userTotalWithdrawn + userAvailable + data[4]) / 1000000;
        //         userTotalEarnedTrx = parseFloat(getFormattedNumber(userTotalEarnedTrx));
        //         $('.userEarned').html(userTotalEarnedTrx);
        //     }
        // })
    }

    // 最后10名地址
    async function loadLastUser() {
        let instance = await tronWeb.contract(abi, contractAddress);

        let res = await instance.getLastTenParter().call();

        $(".lista").html("");
        $(".listb").html("");
        for (let i = 9; i >= 0; i--) {
            let item = tronWeb.address.fromHex(res["addr"][i]);
            let isAddress = tronWeb.isAddress(item)
            if (i >= 5) {
                $(".lista").append("<p><span class=\"place\">" + (i + 1) + "</span>" + item.substring(0, 10) + "********" + item.substring(20, item.length) + "<i class=\"far fa-copy\"></i></p>")

            } else {
                $(".listb").append("<p><span class=\"place\">" + (i + 1) + "</span>" + item.substring(0, 10) + "********" + item.substring(20, item.length) + "<i class=\"far fa-copy\"></i></p>")

            }

        }


    }

    // 最后10名地址
    async function loadLastUser() {
        let instance = await tronWeb.contract(abi, contractAddress);

        let res = await instance.getLastTenParter().call();

        $(".lista").html("");
        $(".listb").html("");
        for (let i = 9; i >= 0; i--) {
            let item = tronWeb.address.fromHex(res["addr"][i]);
            let isAddress = tronWeb.isAddress(item)
            if (i >= 5) {
                $(".lista").append("<p><span class=\"place\">" + (i + 1) + "</span>" + item.substring(0, 10) + "********" + item.substring(20, item.length) + "<i class=\"far fa-copy\"></i></p>")

            } else {
                $(".listb").append("<p><span class=\"place\">" + (i + 1) + "</span>" + item.substring(0, 10) + "********" + item.substring(20, item.length) + "<i class=\"far fa-copy\"></i></p>")

            }

        }


    }


    // 倒计时
    async function timer() {

        let instance = await tronWeb.contract(abi, contractAddress);

        let res = await instance.FOMO_START_TIME().call();

        let t = parseInt(res)
        //t=1605014379000;
        if (t === 0) {
            $(".count-time").html("<b>00:00:00</b>")
        } else {

            var date2 = new Date()

            var s2 = date2.getTime();

            t = t + 24 * 60 * 60 * 1000
            var total = parseInt((t - s2) / 1000);

            $(".timeBar").each(function () {
                $(this).countdownsync({
                    dayTag: "",
                    hourTag: "<label class='tt hh dib vam'>00</label><span>:</span>",
                    minTag: "<label class='tt mm dib vam'>00</label><span>:</span>",
                    secTag: "<label class='tt ss dib vam'>00</label><span></span>",
                    dayClass: ".dd",
                    hourClass: ".hh",
                    minClass: ".mm",
                    secClass: ".ss",
                    isDefault: false,
                    showTemp: 1

                }, function () {
                    location.reload();
                }, total);
            });
        }


    }


    // 最后10名地址
    async function loadTrasaction() {

        //
        // for (let i = 0; i < lastUser.length; i++) {
        //
        //     if (i < 4) {
        //
        //         $(".lastdepowrap").append("<div class=\"lastdepo\" data-scroll=\"toggle(.fromTopIn, .fromTopOut)\">\n" +
        //             "                               <span><i class=\"fas fa-arrow-to-bottom\"></i> " + tronWeb.toDecimal(data.data[i]['amount']) / 1000000 + " TRX</span>\n" +
        //             "                           <span>" + data.data[i]['hash'].substring(0, 10) + "...</span>\n" +
        //             "                           <span><a href=\"https://tronscan.org/#/transaction/" + data.data[i]['hash'] + "\" class=\"maindescbut\" target=\"_blank\"><i class=\"far fa-eye\"></i></a></span>\n" +
        //             "                           </div>")
        //     }
        // }


        // load last transaction
        $.ajax({
            url: "https://apilist.tronscan.org/api/transaction?sort=-timestamp&count=true&limit=50&start=0&address=" + contractAddress,
            type: "get",
            dataType: "json",
            success: function (data) {
                if (data && data.data) {
                    $(".lastdepowrap").html("");
                    let j = 0;
                    for (let i = 0; i < data.data.length; i++) {

                        if (j < 4 && data.data[i]["result"] === "SUCCESS" && data.data[i]["amount"] > 0 && data.data[i]["toAddress"] === contractAddress) {
                            j++;
                            $(".lastdepowrap").append("<div class=\"lastdepo\" data-scroll=\"toggle(.fromTopIn, .fromTopOut)\">\n" +
                                "                               <span><i class=\"fas fa-arrow-to-bottom\"></i> " + tronWeb.toDecimal(data.data[i]['amount']) / 1000000 + " TRX</span>\n" +
                                "                           <span>" + data.data[i]['hash'].substring(0, 10) + "...</span>\n" +
                                "                           <span><a href=\"https://tronscan.org/#/transaction/" + data.data[i]['hash'] + "\" class=\"maindescbut\" target=\"_blank\"><i class=\"far fa-eye\"></i></a></span>\n" +
                                "                           </div>")
                        }
                    }
                }
            }
        });
    }

    async function updateFull() {
        await getUserPercentRate();
        await getUserTotalDeposits();
        await getUserTotalWithdrawn();
        await getUserLastDepositTime();
        await getUserReferrer();
        await getUserPerformance();
        await getUserSuperNode();
        await getSuperNodeList();
        await getUserRefStats();
        await loadLastUser();
        await timer();
        //await getSuperNodeLength();
    }

    async function update() {
        await getUserPercentRate();
        await getUserTotalDeposits();
        await getUserTotalWithdrawn();
        await getUserLastDepositTime();
        await getUserReferrer()
    }

    async function update2() {
        await getUserRefStats();
        await loadLastUser();
        // await getSuperNodeLength();
    }

    setInterval(async function () {

        var contractBalance = $('.contractBalance').data('max');

        let instance = await tronWeb.contract(abi, contractAddress);


        let res1 = await instance.totalUsers().call();
        leval1 = tronWeb.toDecimal(res1);
        //userLeval1 = parseFloat(getFormattedNumber(leval1));
        $('.totalUsers').html(leval1)


        let res2 = await instance.totalInvested().call();
        leval2 = tronWeb.toDecimal(res2) / 1000000;
        userLeval2 = parseFloat(getFormattedNumber(leval2));
        $('.totalInvested').html(leval2)


        // $.ajax({
        //     url: "/ajax", type: "POST", data: {type: "1"}, dataType: "json", success: function (data) {
        //         if (data[0] != contractBalance) {
        //             $('.contractBalance').data('max', data[0]);
        //             $('.totalInvested').html(data[1]);
        //             $('.totalUsers').data('max', data[2]);
        //             $('.contractBalanceRateMain').html(data[3]);
        //             if ($('.contractBalanceRate').length > 0) {
        //                 $('.contractBalanceRate').html('+' + parseFloat(data[3]).toFixed(1) + '%')
        //             }
        //             animateNumbers()
        //         }
        //     }
        // });
        if (userAddress) {
            update2()
        }


    }, 5000);


    setInterval(async function () {


        tronWeb.trx.getBalance(contractAddress).then(result => {
            let balance = tronWeb.toDecimal(result) / 1000000;
            let b = parseFloat(getFormattedNumber(balance));
            $('.contractBalance').html(b);
        })

    }, 8000);

    setInterval(function () {
        if (userAddress) {
            update()
        }

        loadTrasaction()

    }, 15000);
    var clipboard = new ClipboardJS('.buttoncopy');
    // $(".langwrap").click(function (e) {
    //     e.preventDefault();
    //     var classes = $(this).attr('class').split(" ").toString();
    //     var lang = classes.substr(classes.length - 2);
    //     if (language != lang && lang.match(/^[a-z]{2}$/)) {
    //         $.ajax({
    //             type: "post", url: "/language/set", data: {language: lang}, success: function (data) {
    //                 window.location.reload(false)
    //             }
    //         })
    //     }
    //     return false
    // });
    $(".numbers").on("keypress keyup blur", function (event) {
        $(this).val($(this).val().replace(/[^0-9\.|\,]/g, ''));
        if (event.which == 44) {
            return true
        }
        if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
            event.preventDefault()
        }
    });

    function calc() {
        var calcDepositAmount = parseFloat($(".calcDepositAmount").val().replace(',', '.'));
        var calcContractBonus = parseFloat($(".calcContractBonus").val().replace(',', '.'));
        $('.calcInputedAmount').html(calcDepositAmount);
        if (!isNaN(calcDepositAmount) && calcDepositAmount >= 100 && !isNaN(calcContractBonus) && calcContractBonus >= 0) {
            var day = 1;
            var perc = 0;
            var bonus = 0;
            var amount = perc * calcDepositAmount / 100;
            var data = '';
            while (amount < calcDepositAmount * 2) {
                perc = 1 + calcContractBonus + bonus / 10;
                amount = amount + (perc * calcDepositAmount / 100);
                if (amount > calcDepositAmount * 2) {
                    amount = calcDepositAmount * 2
                }
                data += '<span>' + day + ') +' + perc.toFixed(1) + '% = ' + amount.toFixed(1) + ' TRX</span>';
                day += 1;
                bonus += 1
            }
        } else {
            data = '<br>Please enter correct amount and contract balance bonus percent!'
        }
        $('.calculations').html(data)
    }

    $(".calcDepositAmount,.calcContractBonus").on('keyup change', function () {
        calc()
    });
    if ($(".calcDepositAmount").length > 0) {
        calc()
    }
});